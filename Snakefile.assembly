import shutil
import glob
import os
import datetime

configfile : config.get("configfile")
timestamp = str(datetime.datetime.now().strftime("%Y%m%d%H%M"))

# Collect samples. They need to be stored in data/
SAMPLES,R, = glob_wildcards("data/{id}_{r}.fastq.gz")
SAMPLES = set(SAMPLES)
R = set(R)

onsuccess:
    # delete files
    if  (config["remove_temp"]):
        print("Removing temporary files")
        try:
            shutil.rmtree ("tmp")
        except:
            pass
        try:
            shutil.rmtree ("data")
        except:
            pass
        try:
            shutil.rmtree ("log")
        except:
            pass
        try:
            dirs = glob.glob ("multiqc_report*")
            for dir in dirs:
                shutil.rmtree (dir)
        except:
            pass
        try:
            dirs = glob.glob ("stats/multiqc_report*")
            for dir in dirs:
                shutil.rmtree (dir)
        except:
            pass
        try:
            shutil.rmtree ("ref")
        except:
            pass
    try:
        os.mkdir("results")
    except:
        pass
    for dir in ["stats", "scaffolds"]:
        shutil.move(dir, "results/"+dir)
    print("Workflow finished!")
    return
 
onerror:
    print("Workflow finished with errors")
    os._exit(13)


rule all:
    input:
        "stats/MultiQC_report.html",
        "stats/ResFinder.tsv",
        "stats/MLST.tsv",
        "stats/CoverageStatistics_summary.tsv",
        expand ("scaffolds/{sample}.fna", sample=SAMPLES),
        expand ("stats/annotated/{sample}/{sample}.gff", sample=SAMPLES)

rule fastqc:
    input:
        "data/{sample}_R1.fastq.gz"
    output:
        "tmp/{sample}_R1_fastqc.html",
        temp = "data/{sample}_R1.fastq"
    conda:
        "envs/fastqc.yaml"
    shell:
        "zcat {input} >> {output.temp} "
        "&& fastqc {output.temp} -o tmp"

rule trim:
    input:
        "data/{sample}_{r}.fastq.gz"
    output:
        "tmp/{sample}_{r}.fastq"
    conda:
        "envs/bactofidia.yaml"
    params:
        p = config["seqtk"]["params"]
    shell: 
       "seqtk trimfq {params.p} {input} > {output}"  

rule spades:
    input: 
        R1="tmp/{sample}_R1.fastq",
        R2="tmp/{sample}_R2.fastq"
    output:
        "tmp/assembly/{sample}/scaffolds.fasta"
    conda:
        "envs/spades.yaml"
    params:
        spadesparams = config["SPAdes"]["params"],
        kmer = config["SPAdes"]["krange"],
        cov = config["mincov"],
        outfolder = "tmp/assembly/{sample}"
    shell:
        "spades.py -1 {input.R1} -2 {input.R2} -o {params.outfolder} -k {params.kmer} --cov-cutoff {params.cov} {params.spadesparams}"


rule minlength:
    input:
        "tmp/assembly/{sample}/scaffolds.fasta"
    output:
        "scaffolds/{sample}.fna"
    conda:
        "envs/bactofidia.yaml"
    params:
        minlen = config["minlen"],
        versiontag = "{sample}_"+timestamp
    shell:
        "seqtk seq -L {params.minlen} {input} | sed  s/NODE/{params.versiontag}/g > {output}"

rule rename:
    input:
        "scaffolds/{sample}.fna"
    output:
        "tmp/{sample}.fna"
    shell:
        "cut -f 1,3 -d '_' {input} > {output}"


rule prokka:
    input:
       "tmp/{sample}.fna"
    output:
       "stats/annotated/{sample}/{sample}.gff"
    conda:
        "envs/prokka.yaml"
    params:
        prokka = config["prokka"]["params"],
        outdir = "stats/annotated/{sample}",
        prefix = "{sample}",
        strain = "{sample}"
    shell:
        "prokka --outdir {params.outdir} --strain {params.strain} --prefix {params.prefix} {params.prokka} {input}"
 
rule mlst:
    input:
        expand("scaffolds/{sample}.fna", sample=SAMPLES)
    output:
        out = "stats/MLST.tsv",
        mqcoutput = "tmp/MLST_mqc.tsv"
    conda:
        "envs/perl.yaml"
    params:
        mlst = config["mlst"]["params"],
        outconfig = "config/mlst.output.config"
    shell:
        "mlst {params.mlst} {input} > {output.out} "
        "&& cat {params.outconfig} > {output.mqcoutput} && cat {output.out} >> {output.mqcoutput}"

rule quast:
    input:
        "scaffolds/{sample}.fna",
        gff = "stats/annotated/{sample}/{sample}.gff"
    output:
        html = "tmp/{sample}/report.html"
    conda:
        "envs/quast.yaml"
    params:
        outfolder = "tmp/{sample}",
        p = config["QUAST"]["params"],
        out1 = "tmp/{sample}/report.hml"
    shell:
        "quast {params.p} -o {params.outfolder} {input}"

rule resfinder:
    input:
        expand("scaffolds/{sample}.fna", sample=SAMPLES) 
    output:
        out = "stats/ResFinder.tsv",
        mqcoutput = "tmp/ResFinder_mqc.tsv"
    conda:
        "envs/perl.yaml"
    params:
        p = config["abricate"]["params"]
    shell:
        "abricate {params.p} {input} > {output.out}" 
        "&& sed -i 's/scaffolds\///g' {output.out}"
        "&& cp {output.out} {output.mqcoutput}"

rule map:
    input:
        ref = "scaffolds/{sample}.fna",
        in_R1 = "tmp/{sample}_R1.fastq",
        in_R2 = "tmp/{sample}_R2.fastq"
    output:
        covstats_detail = "tmp/CoverageStatistics_{sample}_scaffolds.txt",
        covstats = "stats/Extra/CoverageStatistics_{sample}.txt"
    conda:
        "envs/bactofidia.yaml"
    shell:
        "bbmap.sh in={input.in_R1} in2={input.in_R2} ref={input.ref} covstats={output.covstats_detail} >> {output.covstats} 2>&1 " 
        "&& sed -i 's/\#//g' {output.covstats_detail}"

rule sum:
    input:
        expand("stats/Extra/CoverageStatistics_{sample}.txt", sample=SAMPLES)
    output:
        out = "stats/CoverageStatistics_summary.tsv",
        mqcoutput = "tmp/Coverage_mqc.tsv"
    params:
        config = "config/coverage.output.config"
    shell:
        "grep 'Average coverage' {input} | sed 's@CoverageStatistics\_@@g' | sed 's@\:Average coverage\:@@g' | sed 's@stats@@g' | sed 's@\\\@@g'| sed 's@\.txt@@g' | sed 's@Extra@@g'| sed 's@\\\\@@g'>> {output.out}"
        "&& cat {params.config} > {output.mqcoutput} && cat {output.out} >> {output.mqcoutput}"

rule multiqc:
    input:
        expand("tmp/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("tmp/{sample}/report.html", sample=SAMPLES),
        expand("stats/Extra/CoverageStatistics_{sample}.txt", sample=SAMPLES),
        expand("stats/annotated/{sample}/{sample}.gff", sample=SAMPLES),
        "tmp/Coverage_mqc.tsv",
        "tmp/MLST_mqc.tsv",
        "tmp/ResFinder_mqc.tsv"
    output:
        "stats/MultiQC_report.html"
    conda:
        "envs/bactofidia.yaml"
    params:
        tmp = "tmp/",
        stats = "stats/",
        title = "bactofidia-"+timestamp,
        p = config["multiqc"]["params"],
        prokka = "--cl_config 'config.prokka_fn_snames: True'"
    shell:
        "multiqc  --title {params.title} {params.p} {params.prokka} -n {output} {params.tmp} {params.stats}" 
